// <auto-generated />
using System;
using ExternalForms_Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExternalForms_Data.Migrations
{
    [DbContext(typeof(ExternalFormsContext))]
    partial class ExternalFormsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExternalForms_Domain.Entities.AnswerField.AnswerFieldEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnswerId")
                        .HasColumnType("int")
                        .HasColumnName("answer_id");

                    b.Property<int?>("AnswerMultipleSelectionId")
                        .HasColumnType("int")
                        .HasColumnName("answer_multiple_selection_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int>("CustomFieldId")
                        .HasColumnType("int")
                        .HasColumnName("custom_field_id");

                    b.Property<int>("DataType")
                        .HasColumnType("int")
                        .HasColumnName("data_type");

                    b.Property<DateTime?>("DatetimeAnswer")
                        .HasColumnType("datetime")
                        .HasColumnName("datetime_answer");

                    b.Property<bool>("IsInactive")
                        .HasColumnType("bit")
                        .HasColumnName("is_inactive");

                    b.Property<decimal>("NumericAnswer")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric")
                        .HasColumnName("numeric_answer");

                    b.Property<string>("TextAnswer")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("")
                        .HasColumnName("text_answer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("AnswerMultipleSelectionId");

                    b.HasIndex("CustomFieldId");

                    b.ToTable("answer_fields", (string)null);
                });

            modelBuilder.Entity("ExternalForms_Domain.Entities.Answers.AnswerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int>("FormModelId")
                        .HasColumnType("int")
                        .HasColumnName("form_model_id");

                    b.Property<bool>("IsInactive")
                        .HasColumnType("bit")
                        .HasColumnName("is_inactive");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("FormModelId");

                    b.ToTable("answers", (string)null);
                });

            modelBuilder.Entity("ExternalForms_Domain.Entities.CustomField.CustomFieldEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("")
                        .HasColumnName("description");

                    b.Property<int>("FieldTypeId")
                        .HasColumnType("int")
                        .HasColumnName("field_type_id");

                    b.Property<int>("FormModelId")
                        .HasColumnType("int")
                        .HasColumnName("form_model_id");

                    b.Property<bool>("IsInactive")
                        .HasColumnType("bit")
                        .HasColumnName("is_inactive");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit")
                        .HasColumnName("is_required");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(80)
                        .HasColumnType("varchar")
                        .HasDefaultValue("")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("FieldTypeId");

                    b.HasIndex("FormModelId");

                    b.ToTable("custom_fields", (string)null);
                });

            modelBuilder.Entity("ExternalForms_Domain.Entities.FieldType.FieldTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int>("DataType")
                        .HasColumnType("int")
                        .HasColumnName("data_type");

                    b.Property<bool>("IsInactive")
                        .HasColumnType("bit")
                        .HasColumnName("is_inactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(80)
                        .HasColumnType("varchar")
                        .HasDefaultValue("")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("field_types", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataType = 0,
                            IsInactive = false,
                            Name = "Texto simples"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataType = 0,
                            IsInactive = false,
                            Name = "Parágrafo"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataType = 1,
                            IsInactive = false,
                            Name = "Número simples"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataType = 1,
                            IsInactive = false,
                            Name = "Moeda"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataType = 1,
                            IsInactive = false,
                            Name = "Percentual"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataType = 2,
                            IsInactive = false,
                            Name = "Data e hora"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataType = 1,
                            IsInactive = false,
                            Name = "Sim ou Não"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataType = 3,
                            IsInactive = false,
                            Name = "Multiplas seleções"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataType = 3,
                            IsInactive = false,
                            Name = "Multipla escolha"
                        });
                });

            modelBuilder.Entity("ExternalForms_Domain.Entities.FormModel.FormModelEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("")
                        .HasColumnName("description");

                    b.Property<bool>("IsInactive")
                        .HasColumnType("bit")
                        .HasColumnName("is_inactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(120)
                        .HasColumnType("varchar")
                        .HasDefaultValue("")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("form_models", (string)null);
                });

            modelBuilder.Entity("ExternalForms_Domain.Entities.MultipleSelection.MultipleSelectionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int>("CustomFieldId")
                        .HasColumnType("int")
                        .HasColumnName("custom_field_id");

                    b.Property<bool>("IsInactive")
                        .HasColumnType("bit")
                        .HasColumnName("is_inactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasDefaultValue("")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CustomFieldId");

                    b.ToTable("multiple_selections", (string)null);
                });

            modelBuilder.Entity("ExternalForms_Domain.Entities.AnswerField.AnswerFieldEntity", b =>
                {
                    b.HasOne("ExternalForms_Domain.Entities.Answers.AnswerEntity", "Answer")
                        .WithMany("AnswerFields")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExternalForms_Domain.Entities.MultipleSelection.MultipleSelectionEntity", "MultipleSelection")
                        .WithMany("AnswerFields")
                        .HasForeignKey("AnswerMultipleSelectionId");

                    b.HasOne("ExternalForms_Domain.Entities.CustomField.CustomFieldEntity", "CustomField")
                        .WithMany("AnswerFields")
                        .HasForeignKey("CustomFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("CustomField");

                    b.Navigation("MultipleSelection");
                });

            modelBuilder.Entity("ExternalForms_Domain.Entities.Answers.AnswerEntity", b =>
                {
                    b.HasOne("ExternalForms_Domain.Entities.FormModel.FormModelEntity", "FormModel")
                        .WithMany("Answers")
                        .HasForeignKey("FormModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormModel");
                });

            modelBuilder.Entity("ExternalForms_Domain.Entities.CustomField.CustomFieldEntity", b =>
                {
                    b.HasOne("ExternalForms_Domain.Entities.FieldType.FieldTypeEntity", "FieldType")
                        .WithMany("CustomFields")
                        .HasForeignKey("FieldTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExternalForms_Domain.Entities.FormModel.FormModelEntity", "FormModel")
                        .WithMany("CustomFields")
                        .HasForeignKey("FormModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FieldType");

                    b.Navigation("FormModel");
                });

            modelBuilder.Entity("ExternalForms_Domain.Entities.MultipleSelection.MultipleSelectionEntity", b =>
                {
                    b.HasOne("ExternalForms_Domain.Entities.CustomField.CustomFieldEntity", "CustomField")
                        .WithMany("MultipleSelections")
                        .HasForeignKey("CustomFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomField");
                });

            modelBuilder.Entity("ExternalForms_Domain.Entities.Answers.AnswerEntity", b =>
                {
                    b.Navigation("AnswerFields");
                });

            modelBuilder.Entity("ExternalForms_Domain.Entities.CustomField.CustomFieldEntity", b =>
                {
                    b.Navigation("AnswerFields");

                    b.Navigation("MultipleSelections");
                });

            modelBuilder.Entity("ExternalForms_Domain.Entities.FieldType.FieldTypeEntity", b =>
                {
                    b.Navigation("CustomFields");
                });

            modelBuilder.Entity("ExternalForms_Domain.Entities.FormModel.FormModelEntity", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("CustomFields");
                });

            modelBuilder.Entity("ExternalForms_Domain.Entities.MultipleSelection.MultipleSelectionEntity", b =>
                {
                    b.Navigation("AnswerFields");
                });
#pragma warning restore 612, 618
        }
    }
}
